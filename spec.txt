Screen Reader Application Specification
===================================

A Python application that captures and processes text from a selected screen region, with support for dialog summarization and speech-optimized output.

Core Features
------------
1. Screen Region Selection
   - Visual region selector with thin green border
   - Semi-transparent overlay for better visibility
   - Intuitive cursor feedback:
     * Resize cursors on corner handles
     * Hand cursor for dragging
     * Arrow cursor outside region

2. Screen Capture
   - High-frequency capture (1 second intervals)
   - Sensitive change detection using perceptual hashing
   - Efficient image processing and storage
   - Automatic cleanup of temporary files

3. Text Processing
   - OpenAI Vision API integration for text extraction
   - Context-aware text processing
   - Smart text filtering:
     * Excludes boxed content
     * Ignores status messages
     * Prevents duplicates
   - Maintains conversation history
   - Concurrency control:
     * Single active API call at a time
     * Skips overlapping requests
   - Detailed logging:
     * Timestamped prompt files
     * Response tracking
     * Clean startup state

4. Dialog Processing
   - First-person tone for natural conversation
   - Speech-optimized brevity
   - Automatic timestamping
   - Prevents duplicate dialog entries
   - Concurrency management:
     * One active summarization at a time
     * Proper state handling
   - Debug-friendly logging:
     * All prompts saved to files
     * Response tracking
     * Fresh start on launch

5. Text-to-Speech (TTS)
   - Uses ElevenLabs API for high-quality speech synthesis
   - Supports multiple voices
   - Streams audio for real-time playback
   - Automatically manages microphone volume during playback:
     * Saves original microphone volume
     * Mutes microphone before TTS playback
     * Restores microphone after playback completes
     * Prevents Voice Control from capturing TTS audio

Key Components
-------------
1. Main Window (src/main.py)
   - Core application logic and UI
   - Four display tabs:
     * Image Preview: Shows current capture
     * Captured Text: Raw captured text
     * Debug Log: Application logs
     * Dialog: Summarized conversations
   - Manages capture timing and image comparison

2. RegionSelector (src/region_selector.py)
   - Clean, minimal UI with thin borders
   - Intuitive resize/drag interactions
   - Smart cursor feedback
   - Screen coordinate handling

3. OpenAI Integration (src/openai_client.py)
   - Vision API for text extraction
   - JSON response format
   - Context management
   - Error handling and logging

4. Dialog Processing (src/dialog_summarizer.py)
   - First-person conversation style
   - Speech-optimized summaries
   - Timestamp management
   - Duplicate prevention

5. ElevenLabs API Integration (src/tts_client.py)
   - High-quality speech synthesis
   - Supports multiple voices
   - Streams audio for real-time playback
   - Automatically manages microphone volume during playback

File Structure
-------------
- src/: Source code
- output/: Generated files
  * captures/: Screen captures
  * dialogs/: Processed dialogs
  * debug.log: Application logs
  * captured_text.txt: Raw text
- temp/: Temporary data
- prompts/: OpenAI prompt templates

Dependencies
-----------
- PyQt6: GUI framework
- OpenAI API: Text extraction and summarization
- Python Imaging Library: Image handling
- imagehash: Perceptual image comparison
- mss: Screen capture
- dotenv: Environment configuration
- ElevenLabs API: Text-to-speech synthesis

Configuration
-----------
- .env file for API keys
- Region selection saved between sessions
- Configurable capture frequency (1s default)
- Adjustable image comparison sensitivity
- Customizable TTS settings

Recent Updates
------------
- Improved region selector UI and usability
- Enhanced capture sensitivity and performance
- Speech-optimized dialog processing
- Better error handling and logging
- Improved prompt handling for text processing
- Added concurrency control and detailed logging
- Integrated ElevenLabs API for TTS functionality
- Added microphone volume control for TTS playback

Note: Generated files are excluded from version control.
